package com.jainyJobPortal.Controller;

import java.util.Date;
import java.util.List;
import java.util.Objects;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.AnonymousAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.jainyJobPortal.Services.JobPostActivityService;
import com.jainyJobPortal.Services.UsersService;
import com.jainyJobPortal.entity.JobPostActivity;
import com.jainyJobPortal.entity.RecruiterJobsDto;
import com.jainyJobPortal.entity.RecruiterProfile;
import com.jainyJobPortal.entity.Users;

@Controller
public class JobPostActivityController {
         
	private final UsersService usersService;
	private final JobPostActivityService jobPostActivityService;
	
	@Autowired
	public JobPostActivityController(UsersService usersService, JobPostActivityService jobPostActivityService) {
		this.jobPostActivityService=jobPostActivityService;
		this.usersService = usersService;
	}
    
	@GetMapping("/dashboard/")
	public String searchJobs(Model model, 
			@RequestParam(value="job,required=false") String job,
			@RequestParam(value="location",required=false) String location,
			@RequestParam(value="partTime",required=false) String partTime,
			@RequestParam(value="fullTime",required=false) String fullTime,
			@RequestParam(value="freelance",required=false) String freelance,
			@RequestParam(value="remoteOnly",required=false) String remoteOnly,
			@RequestParam(value="officeOnly",required=false) String officeOnly,
			@RequestParam(value="partialRemote",required=false) String partialRemote,
			@RequestParam(value= "today",required=false) boolean today,
			@RequestParam(value="days7",required=false) boolean days7,
			@RequestParam(value="days30",required=false) boolean days30
			){
		
	     model.addAttribute("partTime",Objects.equals(partTime, "Part-Time"));
	     model.addAttribute("fullTime",Objects.equals(partTime, "Full-Time"));
	     model.addAttribute("freelance",Objects.equals(freelance, "Freelance"));
	     model.addAttribute("remoteOnly",Objects.equals(remoteOnly, "Remote-Only"));
	     
	     Object currentUserProfile = usersService.getCurrentUserProfile();
		Authentication authentication =SecurityContextHolder.getContext().getAuthentication();
		
		if(!(authentication instanceof AnonymousAuthenticationToken)) {
			String currentUserName=authentication.getName();
		      model.addAttribute("username",currentUserName);
		      
		      if(authentication.getAuthorities().contains(new SimpleGrantedAuthority("Recruiter"))) {
		    	  List<RecruiterJobsDto> recruiterJobs =jobPostActivityService.getRecruiterJobs(((RecruiterProfile)currentUserProfile).getUserAccountId());
                model.addAttribute("jobPost",recruiterJobs);		      
		      }
		}
		model.addAttribute("user", currentUserProfile);
		return "dashboard";
	}
	
	@GetMapping("/dashboard/add")
	public String addJobs(Model model) {
		model.addAttribute("jobPostActivity", new JobPostActivity());
		model.addAttribute("user",usersService.getCurrentUserProfile());
		return "add-jobs";
	}
	
	@PostMapping("/dashboard/addNew")
	public String addNew(JobPostActivity jobPostActivity, Model model) {
		
		Users user = usersService.getCurrentUser();
		if(user!=null) {
			jobPostActivity.setPostedById(user);
		}
		jobPostActivity.setPostedDate( new Date());
		model.addAttribute("jobPostActivity",jobPostActivity);
		JobPostActivity saved = jobPostActivityService.addNew(jobPostActivity);
		return "redirect:/dashboard/";
	}
	@PostMapping("dashboard/edit/{id}")
	public String editJob(@PathVariable("id") int id, Model model) {
		JobPostActivity jobPostActivity = jobPostActivityService.getOne(id);
		model.addAttribute("jobPostActivity",jobPostActivity);
		model.addAttribute("user",usersService.getCurrentUserProfile());
		return "add-jobs";
	}
}
